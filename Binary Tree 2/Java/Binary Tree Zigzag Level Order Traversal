/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        List<List<Integer>> finalList = new ArrayList<>();
       if(root == null){
           return finalList;
       }
        q.add(root);
        int count = 0;
        while(!q.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int size = q.size();
            if(count%2 == 0){
                for(int i = 0;i<size;i++){
                    TreeNode temp = q.poll();
                    list.add(temp.val);
                    if(temp.left!=null){
                        q.add(temp.left);
                    }
                    if(temp.right!=null){
                        q.add(temp.right);
                    }
                }
            }
            else{
                Stack<Integer> stack = new Stack<>();
                for(int i = 0;i<size;i++){
                    TreeNode temp = q.poll();
                    //System.out.println("Adding "+temp.val);
                    stack.add(temp.val);
                    if(temp.left!=null){
                        q.add(temp.left);
                    }
                    if(temp.right!=null){
                        q.add(temp.right);
                    }
                }
                while(!stack.isEmpty()){
                    list.add(stack.pop());
                }
            }
            count++;
            finalList.add(list);
        }
        return finalList;
    }
}
