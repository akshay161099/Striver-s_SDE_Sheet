class Solution {
    public boolean isBipartite(int[][] graph) {
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        int[] color = new int[graph.length];
        
        for(int i = 0;i<color.length;i++){
            color[i] = -1;
        }
        for(int i = 0;i<graph.length;i++){
            if(color[i] == -1){
                if(!bfs(i,graph,color)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean bfs(int i, int[][] graph, int[] color){
        color[i] = 0;
        Queue<Integer> q = new LinkedList<>();
        q.add(i);
        while(!q.isEmpty()){
            int temp = q.poll();
            for(int j : graph[temp]){
                if(color[j] == -1){
                    color[j] = 1-color[temp];
                    q.add(j);
                }
                if(color[j]==color[temp]){
                    return false;
                }
            }
        }
        return true;
        }
    
}
