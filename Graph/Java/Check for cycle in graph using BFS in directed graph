class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        boolean[] visited = new boolean[numCourses];
        int[] indegree = new int[numCourses];
        ArrayList[] graph = new ArrayList[numCourses];
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0;i<numCourses;i++){
            graph[i] = new ArrayList<>();
        }
        for(int i = 0;i<prerequisites.length;i++){
            indegree[prerequisites[i][0]]++;
            graph[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        int count = 0;
        for(int i = 0;i<indegree.length;i++){
            if(indegree[i] == 0){
                q.add(i);
                count++;
            }
        }
        while(!q.isEmpty()){
            int temp = (int)q.poll();
            for(int i = 0;i<graph[temp].size();i++){
                int var = (int)graph[temp].get(i);
                indegree[var]-=1;
                if(indegree[var] == 0){
                    q.add(var);
                    count++;
                }
            }
        }
        return count == numCourses;
    }
}

//     0 -> 1
