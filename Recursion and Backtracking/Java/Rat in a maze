import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}

class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        ArrayList<String> list = new ArrayList<>();
        int[][] visited = new int[n][n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                visited[i][j] = 0;
            }
        }
        if(m[0][0] == 1){
            helper(m,list,"",0,0,n,visited);
        }
        return list;
    }
    public static void helper(int[][] m, ArrayList<String> list, String s,int i, int j, int n,int[][] visited){
        if(i == n-1 && j == n-1){
            list.add(s);
            return;
        }
        //downwards
        if(i+1 < n && visited[i+1][j] == 0 && m[i+1][j] == 1){
            visited[i][j] = 1;
            helper(m,list,s+"D",i+1,j,n,visited);
            visited[i][j] = 0;
        }
        //right
        if(j+1 < n && visited[i][j+1] == 0 && m[i][j+1] == 1){
            visited[i][j] = 1;
            helper(m,list,s+"R",i,j+1,n,visited);
            visited[i][j] = 0;
        }
        //Up
        if(i-1 >= 0 && visited[i-1][j] == 0 && m[i-1][j] == 1){
            visited[i][j] = 1;
            helper(m,list,s+"U",i-1,j,n,visited);
            visited[i][j] = 0;
        }
        //Left
        if(j-1 >= 0 && visited[i][j-1] == 0 && m[i][j-1] == 1){
            visited[i][j] = 1;
            helper(m,list,s+"L",i,j-1,n,visited);
            visited[i][j] = 0;
        }
    }
}
